{
  "hash": "e25dc4e83780185554b13308efcf6e75",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'r base'\n---\n\n\n\n\n## vector and matrix\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(1, 4, 2, 3)\nstr(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:4] 1 4 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(from=3, to=21, by=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3  6  9 12 15 18 21\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(3, 21, length.out=4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3  9 15 21\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(x=1, times=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 1 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(c(1,2), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 1 2 1 2\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(1:2, each=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 1 2 2 2\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(1:2, times=5, each=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 1 1 2 2 2 1 1 1 2 2 2 1 1 1 2 2 2 1 1 1 2 2 2 1 1 1 2 2 2\n```\n\n\n:::\n\n```{.r .cell-code}\nsort(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n\n```{.r .cell-code}\nA <- matrix(data=1:6, nrow=2, ncol=3)\nstr(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n int [1:2, 1:3] 1 2 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\nA <- matrix(data=1:6, nrow=2, ncol=3, byrow=TRUE)\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n```\n\n\n:::\n\n```{.r .cell-code}\nA[,2] <- 1\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    1    3\n[2,]    4    1    6\n```\n\n\n:::\n:::\n\n\n\n\n## Non-numeric values\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 2, 3, 4, 5)\nx < 1 & x > 2 # x < 1 && x > 2 is not work\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nx < 1 | x > 2 # x < 1 || x > 2 is not work\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ny <- c(1, 2, '3', 4, 5)\nnchar(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 1 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n chr [1:5] \"1\" \"2\" \"3\" \"4\" \"5\"\n```\n\n\n:::\n\n```{.r .cell-code}\nxy <- paste('this is', 'a', 'test')\nxy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"this is a test\"\n```\n\n\n:::\n\n```{.r .cell-code}\nxy <- cat('this is', 'a', 'test')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nthis is a test\n```\n\n\n:::\n\n```{.r .cell-code}\nxy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n\n\n## factor\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- c('a', 'b', 'c', 'a', 'b', 'c')\nname <- factor(name, levels=c('a', 'b', 'c', 'd', 'e'), order=TRUE)\nstr(name)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Ord.factor w/ 5 levels \"a\"<\"b\"<\"c\"<\"d\"<..: 1 2 3 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nname\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a b c a b c\nLevels: a < b < c < d < e\n```\n\n\n:::\n\n```{.r .cell-code}\nas.character(name)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"c\" \"a\" \"b\" \"c\"\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}